/*
[class*="cylinder"] .tp {
  transform: rotateX(90deg) translateY(-50%);
}
[class*="cylinder"] .bm {
  transform: rotateX(-90deg) translateY(-50%);
}
[class*="cylinder"] .tp, [class*="cylinder"] .bm, [class*="cylinder"] .tp .photon-shader, [class*="cylinder"] .bm .photon-shader {
  border-radius: 50%;
}
[class*="cylinder"] .bm {
  top: 100%;
}
*/

.cylinder(@diameter: 6em, @length: 5em, @sides: 14, @background: none) {
    
  //@sides:0;
  //transform:translate3D(-(@diameter / 2), -(@length / 2), 0em) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  //@sides:`document.body.clientHeight`;
  //@sid:`jQuery(document).ready(function(){alert($(this).children('div').length)});`;
  //@sides:`document.querySelectorAll('div').length`;
  //@sid:`alert("@{sides}")`;
  
  opacity:1;
  width:@diameter;
  height:@length;
  margin:-(@length / 2) 0 0 -(@diameter / 2);

  div:nth-child(2), .tp, div:nth-child(1), .bm {
    width:@diameter;
    height:@diameter;
  }
  
  .cylinder-sides( @diameter, @length, @sides );
  
  .face {
    .background(@background);
    //background-size:(sin(360deg / @sides / 2) * @diameter * @sides) ((@diameter + @length ) * 2);
    background-size:(@width * @sides) ((@diameter + @length ) * 2);
    background-repeat:no-repeat;
  }

  div:nth-child(2), .tp {
    transform: rotateX(90deg) translateY(-50%);
  }
  div:nth-child(1), .bm {
    transform: rotateX(-90deg) translateY(-50%);
  }
  div:nth-child(2), .tp, div:nth-child(1), .bm, div:nth-child(2) .photon-shader, .tp .photon-shader, div:nth-child(1) .photon-shader, .bm .photon-shader {
    border-radius: 50%;
  }
  div:nth-child(1), .bm {
    top: 100%;
  }
}


.cylinder-sides ( @diameter, @length, @sides, @i: 1 ) when ( @i >= 1 ) and ( @i =< @sides ) {

  @angle:(360deg / @sides / 2);
  @tz-min:(cos(@angle) * (@diameter / 2));  
  @tz-max:(@diameter / 2);
  @tz:((@tz-min + @tz-max) / 2);
  @width:(tan(@angle) * @tz * 2); 
  @ry:(@angle + @angle * (@i - 1) * 2);
  @child:(@i + 2);
  
  div:nth-child(@{child}) {   
    width:@width;
    height:@length;
    background-position: -(@width * (@i - 1)) -@diameter;
    transform: rotateY(@ry) translateX(-50%) translateZ(@tz);
    left: 50%
  }  
  .cylinder-sides( @diameter, @length, @sides, @i + 1 );

}